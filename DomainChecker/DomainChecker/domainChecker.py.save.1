'''
import dns.resolver
import os
import json
import urllib.parse
import re
import requests

EXPORT_FOLDER = "/opt/bitnami/apache/htdocs/DomainChecker/DomainChecker/Export"

def validate_domain(input_value):
    domain_pattern = r"(?:https?://)?(?:www\.)?([^/]+)"
    match = re.match(domain_pattern, input_value)
    if match:
        domain = match.group(1)
        return domain
    else:
        raise ValueError("L'URL ne contient pas de domaine valide.")

def get_highest_iteration(domain):
    highest_iteration = 0
    for filename in os.listdir(EXPORT_FOLDER):
        if filename.startswith(domain):
            iteration_str = filename.split('_')[-1].split('.')[0]
            try:
                iteration = int(iteration_str)
                highest_iteration = max(highest_iteration, iteration)
            except ValueError:
                continue
    return highest_iteration

def evaluate_spf(domain):
    try:
        answers = dns.resolver.resolve(domain, 'TXT')
        for rdata in answers:
            if rdata.strings[0].startswith(b"v=spf1"):
                spf_record = rdata.strings[0].decode()
                mechanism_list = spf_record.split()[1:]
                specific_mechanisms = [mech for mech in mechanism_list if mech.startswith(('a', 'mx', 'ip4', 'ip6', 'include', 'all', '-all', '~all', '?all'))]
                score = min(len(specific_mechanisms), 5)
                return f"{score}/5"
        return "0/5"
    except Exception:
        return "Erreur"

def evaluate_dkim(domain):
    COMMON_DKIM_SELECTORS = ["google", "default", "s1024", "s2048", "s4096"]
    for selector in COMMON_DKIM_SELECTORS:
        dkim_record = f"{selector}._domainkey.{domain}"
        try:
            dns.resolver.resolve(dkim_record, 'TXT')
            return "Pass"
        except Exception:
            continue
    return "Fail"

def evaluate_dmarc(domain):
    dmarc_record = f"_dmarc.{domain}"
    try:
        answers = dns.resolver.resolve(dmarc_record, 'TXT')
        for rdata in answers:
            if rdata.strings[0].startswith(b"v=DMARC1"):
                policies = [part.split('=') for part in rdata.strings[0].decode().split(';') if part.strip()]
                policy_dict = {key: value for key, value in policies if key == 'p'}
                policy = policy_dict.get('p', 'none')
                return policy
        return "none"
    except Exception:
        return "none"

def check_blacklist(domain):
    blacklist_services = ["zen.spamhaus.org"]
    listed_in = "none"
    for service in blacklist_services:
        try:
            query = '.'.join(reversed(domain.split('.'))) + '.' + service
            dns.resolver.resolve(query, 'A')
            listed_in = service
            break
        except dns.resolver.NXDOMAIN:
            continue
        except Exception:
            continue
    return listed_in

def evaluate_bimi(domain):
    score = 0
    max_tests = 4

    dmarc_result = evaluate_dmarc(domain)
    if dmarc_result != "none":
        score += 1

    try:
        answers = dns.resolver.resolve(f"default._bimi.{domain}", 'TXT')
        for rdata in answers:
            bimi_record = ''.join(part.decode('utf-8') for part in rdata.strings)
            if 'v=BIMI1;' in bimi_record:
                score += 1
                logo_url = bimi_record.split('l=')[1].split(';')[0].strip('"') if 'l=' in bimi_record else ""
                if logo_url and requests.head(logo_url).status_code == 200:
                    score += 1
                vmc_url = bimi_record.split('a=')[1].split(';')[0].strip('"') if 'a=' in bimi_record else ""
                if vmc_url:
                    score += 1
                break
    except dns.resolver.NoAnswer:
        pass
    except Exception as e:
        print(f"Erreur lors de la recherche de l'enregistrement BIMI: {e}")

    note = (score / max_tests) * 5
    return f"{note}/5"

def main(domain):
    iteration_number = get_highest_iteration(domain) + 1

    spf_result = evaluate_spf(domain)
    dkim_result = evaluate_dkim(domain)
    dmarc_result = evaluate_dmarc(domain)
    blacklist_result = check_blacklist(domain)
    bimi_score = evaluate_bimi(domain)

    results = {
        "SPF": spf_result,
        "DKIM": dkim_result,
        "DMARC": dmarc_result,
        "Blacklist": blacklist_result,
        "BIMI": bimi_score,
    }

    filename = f"{domain}_{iteration_number}.json"
    filepath = os.path.join(EXPORT_FOLDER, filename)
    with open(filepath, 'w') as file:
        json.dump(results, file, indent=4)

    return results

if __name__ == "__main__":
    try:
        input_value = input("Veuillez entrer le nom de domaine à évaluer : ")
        domain = validate_domain(input_value)
        print(f"Domaine extrait : {domain}")
        results = main(domain)
        print(json.dumps(results, indent=4))
    except ValueError as e:
        print(e)

'''

import dns.resolver
import os
import json
import re
from urllib.parse import urlparse

EXPORT_FOLDER = "/opt/bitnami/apache/htdocs/DomainChecker/DomainChecker/Export"

def validate_domain(input_value):
    parsed_url = urlparse(input_value)
    domain = parsed_url.netloc or parsed_url.path
    domain = domain.split(':')[0]
    
    if not re.match(r"^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", domain):
        raise ValueError("L'URL ne contient pas de domaine valide.")
    return domain

def get_highest_iteration(domain):
    highest_iteration = 0
    for filename in os.listdir(EXPORT_FOLDER):
        if filename.startswith(domain):
            iteration_str = filename.split('_')[-1].split('.')[0]
            try:
                iteration = int(iteration_str)
                highest_iteration = max(highest_iteration, iteration)
            except ValueError:
                continue
    return highest_iteration

def evaluate_spf(domain):
    try:
        answers = dns.resolver.resolve(domain, 'TXT')
        for rdata in answers:
            if rdata.strings[0].startswith(b"v=spf1"):
                spf_record = rdata.strings[0].decode()
                mechanism_list = spf_record.split()[1:]
                specific_mechanisms = [mech for mech in mechanism_list if mech.startswith(('a', 'mx', 'ip4', 'ip6', 'include', 'all', '-all', '~all', '?all'))]
                score = min(len(specific_mechanisms), 5)
                return f"{score}/5"
        return "0/5"
    except Exception:
        return "Erreur"

COMMON_DKIM_SELECTORS = ["google", "default", "s1024", "s2048", "s4096"]
def evaluate_dkim(domain):
    for selector in COMMON_DKIM_SELECTORS:
        dkim_record = f"{selector}._domainkey.{domain}"
        try:
            dns.resolver.resolve(dkim_record, 'TXT')
            return "Pass"
        except Exception:
            continue
    return "Fail"

def evaluate_dmarc(domain):
    dmarc_record = f"_dmarc.{domain}"
    try:
        answers = dns.resolver.resolve(dmarc_record, 'TXT')
        for rdata in answers:
            if rdata.strings[0].startswith(b"v=DMARC1"):
                policies = [part.split('=') for part in rdata.strings[0].decode().split(';') if part.strip()]
                policy_dict = {key: value for key, value in policies if key == 'p'}
                policy = policy_dict.get('p', 'none')
                return policy
        return "none"
    except Exception:
        return "none"

def check_blacklist(domain):
    blacklist_services = ["zen.spamhaus.org"]
    listed_in = "none"
    for service in blacklist_services:
        try:
            query = '.'.join(reversed(domain.split('.'))) + '.' + service
            dns.resolver.resolve(query, 'A')
            listed_in = service
            break
        except dns.resolver.NXDOMAIN:
            continue
        except Exception:
            continue
    return listed_in

def safe_file_write(domain, iteration_number, data):
    safe_domain = re.sub(r"[^a-zA-Z0-9.-]", "", domain)
    filename = f"{safe_domain}_{iteration_number}.json"
    filepath = os.path.join(EXPORT_FOLDER, filename)
    
    if os.path.commonpath([EXPORT_FOLDER, filepath]) != EXPORT_FOLDER:
        raise Exception("Tentative d'accès non autorisé au fichier.")
    
    with open(filepath, 'w') as file:
        json.dump(data, file, indent=4)

def main(domain):
    iteration_number = get_highest_iteration(domain) + 1

    spf_result = evaluate_spf(domain)
    dkim_result = evaluate_dkim(domain)
    dmarc_result = evaluate_dmarc(domain)
    blacklist_result = check_blacklist(domain)

    results = {
        "SPF": spf_result,
        "DKIM": dkim_result,
        "DMARC": dmarc_result,
        "Blacklist": blacklist_result,
    }

    safe_file_write(domain, iteration_number, results)

    return results

if __name__ == "__main__":
    try:
        input_value = input("Veuillez entrer le nom de domaine à évaluer : ")
        domain = validate_domain(input_value)
        print(f"Domaine validé : {domain}")
        results = main(domain)
        print(json.dumps(results, indent=4))
    except ValueError as e:
        print(e)

